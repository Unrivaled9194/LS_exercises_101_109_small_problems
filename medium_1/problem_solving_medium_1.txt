- #1 Rotation (Part 1) -
UNDERSTAND PROBLEM
Notes:

EXAMPLES / TEST CASES
Input / Output:

Test Cases:

DATA STRUCTURE

ALGORITHM


- #2 Rotation (Part 2)-
UNDERSTAND PROBLEM
Notes:
- write a method that:
  - receives two arguments
    - a integer to be rotated
    - a integer indicating the number of last digits
      to rotate
  - rotates that last n digits of a number
  - returns the rotated number
  - Rotating 1 digit returns the original number
  - Assume 'n' is always a positive integer
  - you may use the 'rotate_array' method from exercise 1

EXAMPLES / TEST CASES
Input / Output:
- Input
  - two integers
    - The number to rotate
    - which digits to rotate
- Output
  - rotated number

Test Cases:
rotate_rightmost_digits(735291, 1) => 735291
rotate_rightmost_digits(735291, 2) => 735219
rotate_rightmost_digits(735291, 3) => 735912
rotate_rightmost_digits(735291, 4) => 732915
rotate_rightmost_digits(735291, 5) => 752913
rotate_rightmost_digits(735291, 6) => 352917

DATA STRUCTURE
- Use Number to store input and output
- Use Array for manipulating numbers

ALGORITHM
- Receive integers into method
- convert number to string and then split chars
into an array
-

- #3 Rotation (Part 3)-
UNDERSTAND PROBLEM
Notes:
- write a method that:
  - receives an integer
  - performs the maximum rotation on the integer and returns the value
  - maximum rotation on a number involves:
    - taking a number and rotating it left once
    - then rotate it again keeping the first digit in place
    - then rotate it again keeping the first two digits in place
    - keep doing this until you rotate the final two digits
    - the resulting number is the maximum rotation of the original number
- you may use the rotate_rightmost_digits method from exercise 2

EXAMPLES / TEST CASES
Input / Output:
- Input
  - an integer
- Output
  - the integer maximally rotated

Test Cases:
max_rotation(735291)        => 321579
max_rotation(3)             => 3
max_rotation(35)            => 53
max_rotation(105)           => 15 # the leading zero gets dropped
max_rotation(8_703_529_146) => 7_321_609_845

DATA STRUCTURE
- Use Number for input and output
- Use Array for number manipulating

ALGORITHM
- Receive integer into the method
- convert the number into an array for manipulation
- loop array size - 1 times
  - send the whole array to the rotate_rightmost_digits method telling it to
  operate on n digits. n being the size of the array
  - apply the result to the array
  - minus one from n and repeat
- convert the array to an integer
- return the integer


- # 4 1000 Lights -
UNDERSTAND PROBLEM
Notes:
- problem:
  - you have a bank of switches numbered 1 to n
  - initially all switches are off
  - first pass toggle all the switches
  - second pass toggle switches 2, 4, 6...
  - third pass toggle 3, 6, 9...
  - repeat process through n repetitions
- write a method that:
  - receives one argument, an positive integer = n
  - returns an array indicating all switches that are ON after toggle process

EXAMPLES / TEST CASES
Input / Output:
- Input
  - a positive integer
- Output
  - an array of which switches are on

Example:
Example with n = 5 lights:

round 1: every light is turned on
round 2: lights 2 and 4 are now off; 1, 3, 5 are on
round 3: lights 2, 3, and 4 are now off; 1 and 5 are on
round 4: lights 2 and 3 are now off; 1, 4, and 5 are on
round 5: lights 2, 3, and 5 are now off; 1 and 4 are on
The result is that 2 lights are left on, lights 1 and 4.
The return value is [1, 4].

With 10 lights, 3 lights are left on: lights 1, 4, and 9.
The return value is [1, 4, 9]

Test Cases:
toggle_lights(5)    => [1, 4]
toggle_lights(10)   => [1, 4, 9]

DATA STRUCTURE
- Use Number for method argument
- Use Array for return value
- Possibly use Hash for each numbers toggle

ALGORITHM
- receive integer(n) into method
- loop n times
  - put into hash keys from 1..n
  - put value of each key as "OFF"
- iterate through hash n times
  count1 = 1
  - iterate through the hash starting at count
    count2 = count1
    - access hash key = count2 and toggle value
      - IF ON THEN OFF
      - ELSE ON
    - count2 += count2
  - count1 += 1
- return an array from the hash where values = ON


- #5 Diamonds! -
UNDERSTAND PROBLEM
Notes:
- Write a method that:
  - receives an odd integer (n)
  - displays a diamond in a n X n grid
- assume argument will always be an odd integer

EXAMPLES / TEST CASES
Input / Output:
- Input
  - an odd integer
- Output
  - a n x n diamond grid

Test Cases:
diamond(1)
*

diamond(3)
 *
***
 *

diamond(9)
    *
   ***
  *****
 *******
*********
 *******
  *****
   ***
    *

DATA STRUCTURE
- Use number for input

ALGORITHM
- receive integer(n) into method
- loop n / 2 times
  - draw top lines with #center method
- print middle line
- loop n / 2 times
  - draw bottom lines with #center method


- #6 Stack Machine Interpretation -
UNDERSTAND PROBLEM
Notes:
- this program will contain:
  - a stack of values
  - a register value to be operated on in various ways
- write a method that:
  - receives a set of instructions for the register and stack
  - performs various operations on the register and stack
- commands to be implemented:
  - n Place a value n in the "register". Do not modify the stack.
  - PUSH Push the register value on to the stack. Leave the value in the register.
  - ADD Pops a value from the stack and adds it to the register value, storing the result in the register.
  - SUB Pops a value from the stack and subtracts it from the register value, storing the result in the register.
  - MULT Pops a value from the stack and multiplies it by the register value, storing the result in the register.
  - DIV Pops a value from the stack and divides it into the register value, storing the integer result in the register.
  - MOD Pops a value from the stack and divides it into the register value, storing the integer remainder of the division in the register.
  - POP Remove the topmost item from the stack and place in register
  - PRINT Print the register value
- All operations are integer operations
- commands will be received via a string
- Assume all received commands are correct programs
- Initialize the register to 0
- NOTE: operations that require two values 'pop' the topmost item from the stack.
In other words the operation removes the most recently pushed value from the stack.
Perform the operation using the popped value and register value and stoer the
result back in the register.

EXAMPLES / TEST CASES
Input / Output:
- Input
  - A string of commands
- Output
  - If print command is chosen then print register value
  - Otherwise perform selected operation

Test Cases:
minilang('PRINT')
# 0

minilang('5 PUSH 3 MULT PRINT')
# 15

minilang('5 PRINT PUSH 3 PRINT ADD PRINT')
# 5
# 3
# 8

minilang('5 PUSH POP PRINT')
# 5

minilang('3 PUSH 4 PUSH 5 PUSH PRINT ADD PRINT POP PRINT ADD PRINT')
# 5
# 10
# 4
# 7

minilang('3 PUSH PUSH 7 DIV MULT PRINT ')
# 6

minilang('4 PUSH PUSH 7 MOD MULT PRINT ')
# 12

minilang('-3 PUSH 5 SUB PRINT')
# 8

minilang('6 PUSH')
# (nothing printed; no PRINT commands)

DATA STRUCTURE
- Use string for input instructions
- Use Array for storing each operation and for the stack
- Use Number for the register and math operations

ALGORITHM
- Receive string of commands into method
- Set register to 0
- Split command string into an operations array
- iterate through operations array: (possibly use hash to store commands)
  - if command is an integer place in register
  - if PUSH, push the register value onto the stack. leaving in register as well
  - if POP, remove topmost item from the stack and place in register
  - if PRINT, print register value
  - if ADD, send register and stack to #ADD method
  - if SUB, send register and stack to #SUBTRACT method
  - if MULT, send register and stack to #MULTIPLY method
  - if DIV, send register and stack to #DIVIDE method
  - if MOD, send register and stack to #REMAINDER method
- #ADD method
  - receive register value and stack
  - POP value from stack and add to register value
  - return result as new register value
- #SUBTRACT method
  - receive register value and stack
  - POP value from stack and subtract from register value
  - return result as new register value
- #MULTIPLY method
  - receive register value and stack
  - POP value from stack and multiply by register value
  - return result as new register value
- #DIVIDE method
  - receive register value and stack
  - POP value from stack and divide into register value
  - return integer result as new register value
- #REMAINDER method
  - receive register value and stack
  - POP value from stack and divide into register value
  - return integer remainder result as new register value


- #7 Word to Digit -
UNDERSTAND PROBLEM
Notes:
- write a method that:
  - receives a sentence string
  - returns the string with and number words converted to
  a digit string
  - i.e. 'zero' = '0', 'one' - '1' etc

EXAMPLES / TEST CASES
Input / Output:
- Input
  - a string sentence
- Output
  - a string sentence with digits in stead of number words

Test Cases:
word_to_digit('Please call me at five five five one two three four. Thanks.')
=> 'Please call me at 5 5 5 1 2 3 4. Thanks.'

DATA STRUCTURE
- Use string for input and output
- Use hash to store word keys and digit value strings

ALGORITHM
- receive string into method
- create a hash with number word keys and corresponding digit values
- iterate through each word of the string with #split
  - if a word equals a key in the hash replace it with the keys value
- return the modified string

- #8 Fibonacci Numbers (Recursion) -
UNDERSTAND PROBLEM
Notes:
- write a recursion method that:
  - computes the 'nth' fibonacci number where 'nth' is the argument
  to the method
  - being recursive the method must call itself at least once
- Fibonacci number is the sum of the two previous numbers in a sequence of nums.
  - 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233...
    - 2 is the 4th fibonacci number, 8 is the 7th etc.

EXAMPLES / TEST CASES
Input / Output:
- Input
  - The 'nth' place in the fibonacci sequence
- Output
  - The fibonacci number at the 'nth' place

Test Cases:
fibonacci(1)  => 1
fibonacci(2)  => 1
fibonacci(3)  => 2
fibonacci(4)  => 3
fibonacci(5)  => 5
fibonacci(12) => 144
fibonacci(20) => 6765

DATA STRUCTURE
- Use Number for storing input and output

ALGORITHM
- receive 'nth' number in fibonacci sequence into method
- start loop
  - if 'nth' is less than 2, break loop and return 'nth'
  - else add the call of two fibonacci methods where the arguments are:
    - 'nth - 1' and 'nth - 2' respectively
- the loop will keep recursively calling the fibonacci method until the 'nth'
argument being passed is either 1 or zero and at that time will be added together.
This will store multiple fibonacci method calls is memory and the fibonacci
number will be sum of them all(all the 1 and 0 sums summed)


- #9 Fibonacci Numbers (Procedural) -
UNDERSTAND PROBLEM
Notes:
- rewrite the fibonacci method from exercise 8 without using recursion

EXAMPLES / TEST CASES
Input / Output:
- Input
  - The 'nth' place in the fibonacci sequence
- Output
  - The fibonacci number at the 'nth' place

Test Cases:
fibonacci(20)        => 6765
fibonacci(100)       => 354224848179261915075
fibonacci(100_001) # => 4202692702.....8285979669707537501

DATA STRUCTURE
- Use Number for input, output, and calculation

ALGORITHM
- receive 'nth' place in the fibonacci sequence
- loop 'nth' times
  - num1 = 0
  - num2 = 1
  - result = num1 + num2
  - num1 = num2
  - num2 = result


- #10 Fibonacci Numbers (Last Digit) -
UNDERSTAND PROBLEM
Notes:
- 

EXAMPLES / TEST CASES
Input / Output:

Test Cases:

DATA STRUCTURE

ALGORITHM
